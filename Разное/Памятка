Поиск элементов с помощью Selenium
https://selenium-python.readthedocs.io/

Для поиска элементов на странице в Selenium WebDriver используются несколько стратегий,
позволяющих искать по атрибутам элементов, текстам в ссылках, CSS-селекторам и XPath-селекторам.
Существуют следующие методы поиска элементов:

find_element_by_id — поиск по уникальному атрибуту id элемента. Если ваши разработчики проставляют
                     всем элементам в приложении уникальный id, то вам повезло, и вы чаще всего
                     будет использовать этот метод, так как он наиболее стабильный;
find_element_by_css_selector —  поиск элемента с помощью правил на основе CSS.
                                Это универсальный метод поиска, так как большинство веб-приложений
                                использует CSS для вёрстки и задания оформления страницам.
                                Если find_element_by_id вам не подходит из-за отсутствия id у элементов,
                                то скорее всего вы будете использовать именно этот метод в ваших тестах;
find_element_by_xpath — поиск с помощью языка запросов XPath, позволяет выполнять очень гибкий поиск элементов;
find_element_by_name — поиск по атрибуту name элемента;
find_element_by_tag_name — поиск элемента по названию тега элемента;
find_element_by_class_name — поиск по значению атрибута class;
find_element_by_link_text — поиск ссылки на странице по полному совпадению;
find_element_by_partial_link_text — поиск ссылки на странице, если текст селектора совпадает
                                    с любой частью текста ссылки.

Например, мы хотим найти кнопку со значением id="submit_button":


from selenium import webdriver

browser = webdriver.Chrome()
browser.get("http://suninjuly.github.io/simple_form_find_task.html")
button = browser.find_element_by_id("submit_button")
browser.quit()

Есть второй способ для поиска элементов с помощью универсального метода find_element()
и полей класса By из библиотеки selenium. Пример:

from selenium import webdriver
from selenium.webdriver.common.by import By

browser = webdriver.Chrome()
browser.get("http://suninjuly.github.io/simple_form_find_task.html")
button = browser.find_element(By.ID, "submit_button")
browser.quit()

Можно использовать те же стратегии поиска, что и в первом способе.
Второй способ более удобен для оформления архитектуры тестовых сценариев
с помощью подхода Page Object Model, о котором мы будем говорить далее.
Пока же предлагаем пользоваться первым методом с явным указанием способа поиска,
так как он кажется нам более удобным, но ничто не мешает вам пользоваться и тем, и другим.
Поля класса By, которые можно использовать для поиска:

By.ID – поиск по уникальному атрибуту id элемента;
By.CSS_SELECTOR – поиск элементов с помощью правил на основе CSS;
By.XPATH – поиск элементов с помощью языка запросов XPath;
By.NAME – поиск по атрибуту name элемента;
By.TAG_NAME – поиск по названию тега;
By.CLASS_NAME – поиск по атрибуту class элемента;
By.LINK_TEXT – поиск ссылки с указанным текстом. Текст ссылки должен быть точным совпадением;
By.PARTIAL_LINK_TEXT – поиск ссылки по частичному совпадению текста.

!Важно. Вы можете столкнуться с ситуацией, когда на странице будет несколько элементов,
подходящих под заданные вами параметры поиска. В этом случае WebDriver вернет вам только первый элемент,
который встретит во время поиска по HTML. Если вам нужен не первый, а второй или следующие элементы,
вам нужно либо задать более точный селектор для поиска, либо использовать методы find_elements_by,
которые мы рассмотрим чуть позже.

Иногда в статьях про Selenium WebDriver вы также будете встречать термин "локаторы",
под которым подразумеваются стратегии поиска и значения, по которым должен выполняться поиск.
Например, можно искать по локатору By.ID со значением "send_button".

.find_elements(By.CSS_SELECTOR, селектор) - возвращает список всех найденных элементов

получение значения атрибута
radio_human = browser.find_element(By.ID, 'peopleRule')
human_chk = radio_human.get_attribute('checked')


Посмотрим, как выглядит html для списка:

<label for="dropdown">Выберите язык программирования:</label>
<select id="dropdown" class="custom-select">
    <option selected>--</option>
    <option value="1">Python</option>
    <option value="2">Java</option>
    <option value="3">JavaScript</option>
</select>

Варианты ответа задаются тегом option, значение value может отсутствовать.
Можно отмечать варианты с помощью обычного метода click().
Для этого сначала нужно применить метод click() для элемента с тегом select,
чтобы список раскрылся, а затем кликнуть на нужный вариант ответа:

from selenium import webdriver
browser = webdriver.Chrome()
browser.get(link)

browser.find_element_by_tag_name("select").click()
browser.find_element_by_css_selector("option:nth-child(2)").click()

Последняя строчка может выглядеть и так:

browser.find_element_by_css_selector("[value='1']").click()
Э
то не самый удобный способ, так как нам приходится делать лишний клик для открытия списка.

Есть более удобный способ, для которого используется специальный класс Select из библиотеки WebDriver.
Вначале мы должны инициализировать новый объект, передав в него WebElement с тегом select.
Далее можно найти любой вариант из списка с помощью метода select_by_value(value):

from selenium.webdriver.support.ui import Select
select = Select(browser.find_element_by_tag_name("select"))
select.select_by_value("1") # ищем элемент с текстом "Python"

Можно использовать еще два метода:
select.select_by_visible_text("text") и
select.select_by_index(index)

Первый способ ищет элемент по видимому тексту, например,
select.select_by_visible_text("Python") найдёт "Python" для нашего примера.

Второй способ ищет элемент по его индексу или порядковому номеру.
Индексация начинается с нуля. Для того чтобы найти элемент с текстом "Python",
нужно использовать select.select_by_index(1), так как опция с индексом 0 в данном примере
имеет значение по умолчанию равное "--".

файлы

import os

current_dir = os.path.abspath(os.path.dirname(__file__))    # получаем путь к директории текущего исполняемого файла
file_path = os.path.join(current_dir, 'file.txt')           # добавляем к этому пути имя файла
element.send_keys(file_path)

Элемент в форме, который выглядит, как кнопка добавления файла, имеет атрибут type="file".
Мы должны сначала найти этот элемент с помощью селектора,
а затем применить к нему метод send_keys(file_path).

Alert является модальным окном: это означает, что пользователь не может взаимодействовать
дальше с интерфейсом, пока не закроет alert. Для этого нужно сначала переключиться на окно с alert,
а затем принять его с помощью команды accept():

alert = browser.switch_to.alert
alert.accept()

Чтобы получить текст из alert, используйте свойство text объекта alert:

alert = browser.switch_to.alert
alert_text = alert.text

Другой вариант модального окна, который предлагает пользователю выбор
согласиться с сообщением или отказаться от него, называется confirm.
Для переключения на окно confirm используется та же команда, что и в случае с alert:

confirm = browser.switch_to.alert
confirm.accept()

Для confirm-окон можно использовать следующий метод для отказа:
То же самое, что и при нажатии пользователем кнопки "Отмена".

confirm.dismiss()

Третий вариант модального окна — prompt — имеет дополнительное поле для ввода текста.
Чтобы ввести текст, используйте метод send_keys():

prompt = browser.switch_to.alert
prompt.send_keys("My answer")
prompt.accept()

чтобы отказаться, соответственно:

prompt.dismiss()


Для переключения на новую вкладку надо явно указать, на какую вкладку мы хотим перейти.
Это делается с помощью команды switch_to.window:

browser.switch_to.window(window_name)

Чтобы узнать имя новой вкладки, нужно использовать метод window_handles,
который возвращает массив имён всех вкладок. Зная, что в браузере теперь открыто две вкладки,
выбираем вторую вкладку:

new_window = browser.window_handles[1]

Также мы можем запомнить имя текущей вкладки, чтобы иметь возможность потом к ней вернуться:

first_window = browser.window_handles[0]

Борьба с задержками. Нужно написать 1 раз в начале
Будет указанное время каждые 500мс производить поиск элемента
# говорим WebDriver искать каждый элемент в течение 5 секунд

browser.implicitly_wait(5)


Про Exceptions (Исключения)

Если элемент не был найден за отведенное время, то мы получим NoSuchElementException.

Если элемент был найден в момент поиска, но при последующем обращении к элементу DOM изменился,
то получим StaleElementReferenceException. Например, мы нашли элемент Кнопка и через какое-то
время решили выполнить с ним уже известный нам метод click. Если кнопка за это время была скрыта скриптом,
то метод применять уже бесполезно — элемент "устарел" (stale) и мы увидим исключение.

Если элемент был найден в момент поиска, но сам элемент невидим (например, имеет нулевые размеры),
и реальный пользователь не смог бы с ним взаимодействовать, то получим ElementNotVisibleException.


Задание явных ожиданий реализуется с помощью инструментов WebDriverWait и expected_conditions

from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

ищет кнопку и ждет 5 секунд пока кнопка станет активной:
button = WebDriverWait(browser, 5).until(EC.element_to_be_clickable((By.ID, "локатор")))

element_to_be_clickable вернет элемент, когда он станет кликабельным, или вернет False в ином случае.
в объекте WebDriverWait используется функция until, в которую передается правило ожидания, элемент, а также значение,
по которому мы будем искать элемент

Если мы захотим проверять, что кнопка становится неактивной после отправки данных, то можно задать негативное правило с помощью метода until_not:
говорим Selenium проверять в течение 5 секунд пока кнопка станет неактивной
button = WebDriverWait(browser, 5).until_not(
        EC.element_to_be_clickable((By.ID, "verify")))

условия для expected_conditions :

title_is
title_contains
presence_of_element_located
visibility_of_element_located
visibility_of
presence_of_all_elements_located
text_to_be_present_in_element
text_to_be_present_in_element_value
frame_to_be_available_and_switch_to_it
invisibility_of_element_located
element_to_be_clickable
staleness_of
element_to_be_selected
element_located_to_be_selected
element_selection_state_to_be
element_located_selection_state_to_be
alert_is_present

описание условий тут https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.support.expected_conditions

